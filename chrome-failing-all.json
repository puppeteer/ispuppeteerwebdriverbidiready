{
  "failing": [
    "AriaQueryHandler queryOne (Chromium web test) should find by role \"heading\"",
    "Page.pdf can print to PDF with accessible",
    "Page.pdf can print to PDF with outline",
    "TargetManager should handle targets",
    "Coverage specs JSCoverage should ignore pptr internal scripts if reportAnonymousScripts is true",
    "device request prompt does not crash",
    "device request prompt can be aborted",
    "Fixtures should close the browser when the node process closes",
    "Frame specs Frame Management should support framesets",
    "Frame specs Frame Management should support lazy frames",
    "Frame specs Frame.prototype.frameElement should handle shadow roots",
    "JSHandle Page.evaluateHandle should return the RemoteObject",
    "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option in puppeteer.launch",
    "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option",
    "navigation Page.goto should send referer",
    "network Response.text should throw when requesting body of redirected response",
    "network Response.text should wait until response completes",
    "network Response.remoteAddress should work",
    "network Response.remoteAddress should support redirects",
    "OOPIF should load oopif iframes with subresources and request interception",
    "OOPIF should support lazy OOP frames",
    "Page Page.Events.Console should return remote objects",
    "Page Page.Events.PageError should fire for all value types",
    "Page Page.addScriptTag should throw when added with content to the CSP page",
    "cooperative request interception Page.setRequestInterception should be abortable with custom error codes",
    "request interception Page.setRequestInterception should work with requests without networkId",
    "request interception Page.setRequestInterception should be abortable with custom error codes",
    "Workers can be closed"
  ],
  "pending": [
    "Accessibility get snapshots while the tree is re-calculated",
    "BFCache can navigate to a BFCached page",
    "BFCache can call a function exposed on a page restored from bfcache",
    "BFCache can navigate to a BFCached page containing an OOPIF and a worker",
    "DevTools target.page() should return a DevTools page if custom isPageTarget is provided",
    "DevTools browser.pages() should return a DevTools page if handleDevToolsAsPage is provided in connect()",
    "DevTools browser.pages() should return a DevTools page if handleDevToolsAsPage is provided in launch()",
    "DevTools target.page() should return Page when calling asPage on DevTools target",
    "DevTools should open devtools when \"devtools: true\" option is given",
    "DevTools should expose DevTools as a page",
    "extensions service_worker target type should be available",
    "extensions can evaluate in the service worker",
    "Prerender can screencast",
    "Screencasts Page.screencast should work",
    "Screencasts Page.screencast should work concurrently",
    "Screencasts Page.screencast should validate options",
    "Coverage specs JSCoverage should not hang when there is a debugger statement",
    "Legacy Drag n' Drop should emit a dragIntercepted event when dragged",
    "Legacy Drag n' Drop should emit a dragEnter",
    "Legacy Drag n' Drop should emit a dragOver event",
    "Legacy Drag n' Drop can be dropped",
    "Legacy Drag n' Drop can be dragged and dropped with a single function",
    "headful tests HEADFUL headless should be able to read cookies written by headful",
    "Launcher specs Browser.Events.disconnected should be emitted when: browser gets closed, disconnected or underlying websocket gets closed",
    "network Response.fromServiceWorker Response.fromServiceWorker",
    "network Page.setBypassServiceWorker bypass for network",
    "OOPIF should keep track of a frames OOP state",
    "Page Page.Events.error should throw when page crashes",
    "Page Page.Events.Console should trigger correct Log",
    "Page Page.Events.Console should have location when fetch fails",
    "Page Page.metrics should get metrics from a page",
    "Page Page.metrics metrics event fired on console.timeStamp",
    "Screenshots Cdp should use scale for clip",
    "Screenshots Cdp should allow transparency",
    "Screenshots Cdp should render white background on jpeg file",
    "Screenshots Cdp should work in \"fromSurface: false\" mode",
    "Target should report when a service worker is created and destroyed",
    "Target should create a worker from a service worker",
    "Target should close a service worker",
    "Target should create a worker from a shared worker",
    "Target should close a shared worker",
    "Target should not report uninitialized pages",
    "Target should have an opener",
    "waittask specs Frame.waitForSelector should work when node is added in a shadow root"
  ]
}