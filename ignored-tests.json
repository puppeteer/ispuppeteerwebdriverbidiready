[
  "Accessibility autocomplete",
  "Accessibility filtering children of leaf nodes checkbox with and tabIndex and label should not have children",
  "Accessibility filtering children of leaf nodes checkbox without label should not have children",
  "Accessibility filtering children of leaf nodes non editable textbox with role and tabIndex and label should not have children",
  "Accessibility filtering children of leaf nodes plaintext contenteditable plain text field with role should not have children",
  "Accessibility filtering children of leaf nodes rich text editable fields should have children",
  "Accessibility filtering children of leaf nodes rich text editable fields with role should have children",
  "Accessibility filtering children of leaf nodes root option should return null when the element is no longer in DOM",
  "Accessibility filtering children of leaf nodes root option should support the interestingOnly option",
  "Accessibility filtering children of leaf nodes root option should work a button",
  "Accessibility filtering children of leaf nodes root option should work a menu",
  "Accessibility filtering children of leaf nodes root option should work an input",
  "Accessibility filtering children of leaf nodes should not report text nodes inside controls",
  "Accessibility get snapshots while the tree is re-calculated",
  "Accessibility keyshortcuts",
  "Accessibility multiselectable",
  "Accessibility orientation",
  "Accessibility roledescription",
  "Accessibility should report uninteresting nodes",
  "Accessibility should work",
  "AriaQueryHandler queryOne (Chromium web test) should find by role \"heading\"",
  "Autofill ElementHandle.autofill should fill out a credit card",
  "BFCache can navigate to a BFCached page containing an OOPIF and a worker",
  "BFCache can navigate to a BFCached page",
  "Browser specs Browser.isConnected should set the browser connected state",
  "Browser specs Browser.process should not return child_process for remote browser",
  "BrowserContext should fire target events",
  "BrowserContext should work across sessions",
  "Chromium-Specific Launcher tests Puppeteer.launch |browserURL| option should be able to connect using browserUrl with and without trailing slash",
  "Chromium-Specific Launcher tests Puppeteer.launch |browserURL| option should be able to connect using browserUrl, with and without trailing slash",
  "Chromium-Specific Launcher tests Puppeteer.launch |pipe| option should fire \"disconnected\" when closing with pipe",
  "Chromium-Specific Launcher tests Puppeteer.launch |pipe| option should support the pipe argument",
  "Chromium-Specific Launcher tests Puppeteer.launch |pipe| option should support the pipe option",
  "Chromium-Specific Page Tests Page.setRequestInterception should work with intervention headers",
  "Cookie specs Page.setCookie should default to setting secure cookie for HTTPS websites",
  "Cookie specs Page.setCookie should set secure same-site cookies from a frame",
  "cooperative request interception Page.setRequestInterception should be abortable with custom error codes",
  "cooperative request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash",
  "cooperative request interception Request.resourceType should work for document type",
  "cooperative request interception Request.resourceType should work for stylesheets",
  "Coverage specs CSSCoverage resetOnNavigation should NOT report scripts across navigations",
  "Coverage specs CSSCoverage resetOnNavigation should report stylesheets across navigations",
  "Coverage specs CSSCoverage should ignore injected stylesheets",
  "Coverage specs CSSCoverage should report multiple stylesheets",
  "Coverage specs CSSCoverage should report sourceURLs",
  "Coverage specs CSSCoverage should report stylesheets that have no coverage",
  "Coverage specs CSSCoverage should work with a recently loaded stylesheet",
  "Coverage specs CSSCoverage should work with complicated usecases",
  "Coverage specs CSSCoverage should work with empty stylesheets",
  "Coverage specs CSSCoverage should work with media queries",
  "Coverage specs CSSCoverage should work",
  "Coverage specs JSCoverage includeRawScriptCoverage should include rawScriptCoverage field when enabled",
  "Coverage specs JSCoverage includeRawScriptCoverage should not include rawScriptCoverage field when disabled",
  "Coverage specs JSCoverage resetOnNavigation should NOT report scripts across navigations when enabled",
  "Coverage specs JSCoverage resetOnNavigation should report scripts across navigations when disabled",
  "Coverage specs JSCoverage should ignore eval() scripts by default",
  "Coverage specs JSCoverage should ignore pptr internal scripts if reportAnonymousScripts is true",
  "Coverage specs JSCoverage should not hang when there is a debugger statement",
  "Coverage specs JSCoverage should not hang when there is a debugger statement",
  "Coverage specs JSCoverage should not ignore eval() scripts if reportAnonymousScripts is true",
  "Coverage specs JSCoverage should report multiple scripts",
  "Coverage specs JSCoverage should report right ranges for \"per function\" scope",
  "Coverage specs JSCoverage should report right ranges",
  "Coverage specs JSCoverage should report scripts that have no coverage",
  "Coverage specs JSCoverage should report sourceURLs",
  "Coverage specs JSCoverage should work with conditionals",
  "Coverage specs JSCoverage should work",
  "device request prompt does not crash",
  "DevTools should expose DevTools as a page",
  "DevTools should open devtools when \"devtools: true\" option is given",
  "DevTools target.page() should return a DevTools page if custom isPageTarget is provided",
  "DevTools target.page() should return Page when calling asPage on DevTools target",
  "Drag n' Drop should drag and drop",
  "Drag n' Drop should drop using mouse",
  "Drag n' Drop should drop",
  "Emulate idle state changing idle state emulation causes change of the IdleDetector state",
  "Emulation Page.emulateCPUThrottling should change the CPU throttling rate successfully",
  "Emulation Page.emulateMediaFeatures should work",
  "Emulation Page.emulateMediaType should work",
  "Emulation Page.emulateNetworkConditions should change navigator.connection.effectiveType",
  "Emulation Page.emulateTimezone should throw for invalid timezone IDs",
  "Emulation Page.emulateTimezone should work",
  "Emulation Page.emulateVisionDeficiency should work",
  "Emulation Page.viewport should be detectable by Modernizr",
  "Emulation Page.viewport should detect touch when applying viewport with touches",
  "Emulation Page.viewport should support landscape emulation",
  "Emulation Page.viewport should support touch emulation",
  "Evaluation specs Page.evaluate should fail for circular object",
  "extensions background_page target type should be available",
  "extensions service_worker target type should be available",
  "extensions target.page() should return a background_page",
  "Fixtures dumpio option should work with pipe option",
  "Fixtures should close the browser when the node process closes",
  "headful tests HEADFUL headless should be able to read cookies written by headful",
  "ignoreHTTPSErrors Response.securityDetails Network redirects should report SecurityDetails",
  "ignoreHTTPSErrors Response.securityDetails should be |null| for non-secure requests",
  "ignoreHTTPSErrors Response.securityDetails should work",
  "input tests FileChooser.accept should accept single file",
  "input tests FileChooser.accept should be able to read selected file",
  "input tests FileChooser.accept should be able to reset selected files with empty file list",
  "input tests FileChooser.accept should error on read of non-existent files",
  "input tests FileChooser.accept should fail when accepting file chooser twice",
  "input tests FileChooser.accept should not accept multiple files for single-file input",
  "input tests FileChooser.accept should succeed even for non-existent files",
  "input tests FileChooser.cancel should cancel dialog",
  "input tests FileChooser.cancel should fail when canceling file chooser twice",
  "input tests FileChooser.isMultiple should work for \"multiple\"",
  "input tests FileChooser.isMultiple should work for \"webkitdirectory\"",
  "input tests FileChooser.isMultiple should work for single file pick",
  "input tests Page.waitForFileChooser should prioritize exact timeout over default timeout",
  "input tests Page.waitForFileChooser should respect default timeout when there is no custom timeout",
  "input tests Page.waitForFileChooser should respect timeout",
  "input tests Page.waitForFileChooser should return the same file chooser when there are many watchdogs simultaneously",
  "input tests Page.waitForFileChooser should work when file input is attached to DOM",
  "input tests Page.waitForFileChooser should work when file input is not attached to DOM",
  "input tests Page.waitForFileChooser should work with no timeout",
  "JSHandle Page.evaluateHandle should return the RemoteObject",
  "Launcher specs Browser target events should work",
  "Launcher specs Browser.Events.disconnected should be emitted when: browser gets closed, disconnected or underlying websocket gets closed",
  "Launcher specs Puppeteer Browser.close should terminate network waiters",
  "Launcher specs Puppeteer Browser.disconnect should reject navigation when browser closes",
  "Launcher specs Puppeteer Browser.disconnect should reject waitForSelector when browser closes",
  "Launcher specs Puppeteer Puppeteer.connect should be able to close remote browser",
  "Launcher specs Puppeteer Puppeteer.connect should be able to connect multiple times to the same browser",
  "Launcher specs Puppeteer Puppeteer.connect should be able to connect to a browser with no page targets",
  "Launcher specs Puppeteer Puppeteer.connect should be able to connect to the same page simultaneously",
  "Launcher specs Puppeteer Puppeteer.connect should be able to reconnect to a disconnected browser",
  "Launcher specs Puppeteer Puppeteer.connect should support ignoreHTTPSErrors option",
  "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option in puppeteer.launch",
  "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option",
  "Launcher specs Puppeteer Puppeteer.executablePath returns executablePath for channel",
  "Launcher specs Puppeteer Puppeteer.launch should be able to launch Chrome",
  "Launcher specs Puppeteer Puppeteer.launch should launch Chrome properly with --no-startup-window and waitForInitialPage=false",
  "Launcher specs Puppeteer Puppeteer.launch should work with no default arguments",
  "Legacy Drag n' Drop can be dragged and dropped with a single function",
  "Legacy Drag n' Drop can be dropped",
  "Legacy Drag n' Drop should emit a dragEnter",
  "Legacy Drag n' Drop should emit a dragIntercepted event when dragged",
  "Legacy Drag n' Drop should emit a dragOver event",
  "navigation Frame.goto should return matching responses",
  "navigation Page.goto should navigate to URL with hash and fire requests without hash",
  "navigation Page.goto should send referer",
  "network Page.setBypassServiceWorker bypass for network",
  "network Request.headers should define Chrome as user agent header",
  "network Request.postData should be |undefined| when there is no post data",
  "network Request.postData should work with blobs",
  "network Request.postData should work",
  "network Request.resourceType should work for document type",
  "network Request.resourceType should work for stylesheets",
  "network Response.buffer should throw if the response does not have a body",
  "network Response.buffer should work with compression",
  "network Response.buffer should work",
  "network Response.fromServiceWorker Response.fromServiceWorker",
  "network Response.json should work",
  "network Response.remoteAddress should support redirects",
  "network Response.remoteAddress should work",
  "network Response.text should return uncompressed text",
  "network Response.text should throw when requesting body of redirected response",
  "network Response.text should wait until response completes",
  "network Response.text should work",
  "network Response.timing returns timing information",
  "OOPIF should detect existing OOPIFs when Puppeteer connects to an existing page",
  "OOPIF should evaluate on a page with a PDF viewer",
  "OOPIF should expose events within OOPIFs",
  "OOPIF should keep track of a frames OOP state",
  "OOPIF should load oopif iframes with subresources and request interception",
  "OOPIF should report google.com frame",
  "OOPIF should report oopif frames",
  "OOPIF should support lazy OOP frames",
  "OOPIF should support OOP iframes becoming normal iframes again",
  "OOPIF should support OOP iframes getting detached",
  "OOPIF should support wait for navigation for transitions from local to OOPIF",
  "OOPIF should wait for inner OOPIFs",
  "Page Page.addScriptTag should throw when added with content to the CSP page",
  "Page Page.addStyleTag should throw when added with content to the CSP page",
  "Page Page.Events.Console should have location when fetch fails",
  "Page Page.Events.Console should return remote objects",
  "Page Page.Events.Console should trigger correct Log",
  "Page Page.Events.error should throw when page crashes",
  "Page Page.metrics metrics event fired on console.timeStamp",
  "Page Page.metrics should get metrics from a page",
  "Page Page.pdf can print to PDF with accessible",
  "Page Page.setBypassCSP should bypass after cross-process navigation",
  "Page Page.setBypassCSP should bypass CSP header",
  "Page Page.setBypassCSP should bypass CSP in iframes as well",
  "Page Page.setBypassCSP should bypass CSP meta tag",
  "Page Page.setGeolocation should work",
  "Page Page.setJavaScriptEnabled should work",
  "Page Page.setOfflineMode should emulate navigator.onLine",
  "Page Page.setOfflineMode should work",
  "Page Page.setUserAgent should work with additional userAgentMetdata",
  "Page.click should click with disabled javascript",
  "Page.click should scroll and click with disabled javascript",
  "Page.pdf can print to PDF with accessible",
  "Page.pdf can print to PDF with outline",
  "Prerender can screencast",
  "request interception Page.setRequestInterception should be abortable with custom error codes",
  "request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash",
  "request interception Page.setRequestInterception should work with requests without networkId",
  "request interception Request.resourceType should work for document type",
  "request interception Request.resourceType should work for stylesheets",
  "request proxy in incognito browser context should proxy requests when configured at browser level",
  "request proxy in incognito browser context should proxy requests when configured at context level",
  "request proxy in incognito browser context should respect proxy bypass list when configured at browser level",
  "request proxy in incognito browser context should respect proxy bypass list when configured at context level",
  "request proxy should proxy requests when configured",
  "request proxy should respect proxy bypass list",
  "Screencasts Page.screencast should validate options",
  "Screencasts Page.screencast should work concurrently",
  "Screencasts Page.screencast should work",
  "Screenshots Cdp should allow transparency",
  "Screenshots Cdp should render white background on jpeg file",
  "Screenshots Cdp should use scale for clip",
  "Screenshots Cdp should work in \"fromSurface: false\" mode",
  "Target should close a service worker",
  "Target should close a shared worker",
  "Target should create a worker from a service worker",
  "Target should create a worker from a shared worker",
  "Target should not report uninitialized pages",
  "Target should report when a service worker is created and destroyed",
  "Target.createCDPSession should expose the underlying connection",
  "TargetManager should handle targets",
  "Tracing should output a trace",
  "Tracing should properly fail if readProtocolStream errors out",
  "Tracing should return a buffer",
  "Tracing should return undefined in case of Buffer error",
  "Tracing should run with custom categories if provided",
  "Tracing should run with default categories",
  "Tracing should support a buffer without a path",
  "Tracing should throw if tracing on two pages",
  "Tracing should work without options",
  "Workers can be closed",
  "Workers Page.workers",
  "Workers should emit created and destroyed events",
  "Workers should have an execution context",
  "Workers should have JSHandles for console logs",
  "Workers should report console logs",
  "Workers should work with console logs"
]
