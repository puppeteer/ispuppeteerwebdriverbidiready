{
  "failing": [
    "acceptInsecureCerts Response.securityDetails should work",
    "acceptInsecureCerts Response.securityDetails should be |null| for non-secure requests",
    "acceptInsecureCerts Response.securityDetails Network redirects should report SecurityDetails",
    "Accessibility should work",
    "Accessibility should work for showcase",
    "Accessibility should report uninteresting nodes",
    "Accessibility get snapshots while the tree is re-calculated",
    "Accessibility roledescription",
    "Accessibility orientation",
    "Accessibility autocomplete",
    "Accessibility multiselectable",
    "Accessibility keyshortcuts",
    "Accessibility iframes should not include iframe data if not requested",
    "Accessibility iframes same-origin iframe (interesting only)",
    "Accessibility iframes cross-origin iframe (interesting only)",
    "Accessibility iframes same-origin iframe (all nodes)",
    "Accessibility filtering children of leaf nodes should not report text nodes inside controls",
    "Accessibility filtering children of leaf nodes rich text editable fields should have children",
    "Accessibility filtering children of leaf nodes rich text editable fields with role should have children",
    "Accessibility filtering children of leaf nodes non editable textbox with role and tabIndex and label should not have children",
    "Accessibility filtering children of leaf nodes checkbox with and tabIndex and label should not have children",
    "Accessibility filtering children of leaf nodes checkbox without label should not have children",
    "Accessibility filtering children of leaf nodes should not report Document as leaf node",
    "Accessibility filtering children of leaf nodes plaintext contenteditable plain text field with role should not have children",
    "Accessibility filtering children of leaf nodes root option should work a button",
    "Accessibility filtering children of leaf nodes root option should work an input",
    "Accessibility filtering children of leaf nodes root option should work a menu",
    "Accessibility filtering children of leaf nodes root option should return null when the element is no longer in DOM",
    "Accessibility filtering children of leaf nodes root option should support the interestingOnly option",
    "Accessibility filtering children of leaf nodes root option should work with nested button inside h1 with interestingOnly:true",
    "Accessibility filtering children of leaf nodes elementHandle() should get an ElementHandle from a snapshot item",
    "Accessibility filtering children of leaf nodes elementHandle() should get the parent ElementHandle from a text node accessibility node",
    "AriaQueryHandler queryOne (Chromium web test) should find by role \"heading\"",
    "Autofill ElementHandle.autofill should fill out a credit card",
    "ElementHandle.backendNodeId should work",
    "BFCache can navigate to a BFCached page",
    "BFCache can call a function exposed on a page restored from bfcache",
    "BFCache can navigate to a BFCached page containing an OOPIF and a worker",
    "Target.createCDPSession should work",
    "Target.createCDPSession should send events",
    "Target.createCDPSession should not send extra events",
    "Target.createCDPSession should enable and disable domains independently",
    "Target.createCDPSession should be able to detach session",
    "Target.createCDPSession should throw nice errors",
    "Target.createCDPSession should respect custom timeout",
    "Target.createCDPSession should expose the underlying connection",
    "Target.createCDPSession should keep the underlying connection after being detached",
    "Target.createCDPSession should expose detached state",
    "DevTools browser.pages() should return a DevTools page if handleDevToolsAsPage is provided in launch()",
    "DevTools target.page() should return Page when calling asPage on DevTools target",
    "DevTools should open devtools when \"devtools: true\" option is given",
    "DevTools should expose DevTools as a page",
    "extensions service_worker target type should be available",
    "extensions can evaluate in the service worker",
    "network Request.postData should work",
    "network Request.postData should be |undefined| when there is no post data",
    "network Request.postData should work with blobs",
    "Page.pdf can print to PDF with accessible",
    "Page.pdf can print to PDF with outline",
    "Prerender with emulation can configure viewport for prerendered pages",
    "page.queryObjects should work",
    "page.queryObjects should work for non-trivial page",
    "TargetManager should handle targets",
    "Page.click should click the button with deviceScaleFactor set",
    "Coverage specs JSCoverage should work",
    "Coverage specs JSCoverage should report sourceURLs",
    "Coverage specs JSCoverage should ignore eval() scripts by default",
    "Coverage specs JSCoverage should not ignore eval() scripts if reportAnonymousScripts is true",
    "Coverage specs JSCoverage should ignore pptr internal scripts if reportAnonymousScripts is true",
    "Coverage specs JSCoverage should report multiple scripts",
    "Coverage specs JSCoverage should report right ranges",
    "Coverage specs JSCoverage should report right ranges for \"per function\" scope",
    "Coverage specs JSCoverage should report scripts that have no coverage",
    "Coverage specs JSCoverage should work with conditionals",
    "Coverage specs JSCoverage resetOnNavigation should report scripts across navigations when disabled",
    "Coverage specs JSCoverage resetOnNavigation should NOT report scripts across navigations when enabled",
    "Coverage specs JSCoverage includeRawScriptCoverage should not include rawScriptCoverage field when disabled",
    "Coverage specs JSCoverage includeRawScriptCoverage should include rawScriptCoverage field when enabled",
    "Coverage specs CSSCoverage should work",
    "Coverage specs CSSCoverage should report sourceURLs",
    "Coverage specs CSSCoverage should report multiple stylesheets",
    "Coverage specs CSSCoverage should report stylesheets that have no coverage",
    "Coverage specs CSSCoverage should work with media queries",
    "Coverage specs CSSCoverage should work with complicated usecases",
    "Coverage specs CSSCoverage should work with empty stylesheets",
    "Coverage specs CSSCoverage should ignore injected stylesheets",
    "Coverage specs CSSCoverage should work with a recently loaded stylesheet",
    "Coverage specs CSSCoverage resetOnNavigation should report stylesheets across navigations",
    "Coverage specs CSSCoverage resetOnNavigation should NOT report scripts across navigations",
    "device request prompt does not crash",
    "device request prompt can be aborted",
    "Legacy Drag n' Drop should emit a dragIntercepted event when dragged",
    "Legacy Drag n' Drop should emit a dragEnter",
    "Legacy Drag n' Drop should emit a dragOver event",
    "Legacy Drag n' Drop can be dropped",
    "Legacy Drag n' Drop can be dragged and dropped with a single function",
    "ElementHandle specs ElementHandle.boundingBox should work",
    "Emulation Page.viewport should support mobile emulation",
    "Emulation Page.viewport should support touch emulation",
    "Emulation Page.viewport should be detectable by Modernizr",
    "Emulation Page.viewport should detect touch when applying viewport with touches",
    "Emulation Page.viewport should update media queries when resoltion changes",
    "Emulation Page.viewport should load correct pictures when emulation dpr",
    "Emulation Page.emulate should work",
    "Emulation Page.emulateMediaType should work",
    "Emulation Page.emulateMediaFeatures should work",
    "Emulation Page.emulateVisionDeficiency should work",
    "Emulation Page.emulateNetworkConditions should support offline",
    "Emulation Page.emulateNetworkConditions should change navigator.connection.effectiveType",
    "Emulation Page.emulateCPUThrottling should change the CPU throttling rate successfully",
    "Fixtures should close the browser when the node process closes",
    "Frame specs Frame Management should support framesets",
    "Frame specs Frame Management should support lazy frames",
    "Frame specs Frame.prototype.frameElement should handle shadow roots",
    "Emulate idle state changing idle state emulation causes change of the IdleDetector state",
    "JSHandle Page.evaluateHandle should return the RemoteObject",
    "Launcher specs Puppeteer Puppeteer.launch should set the default viewport",
    "Launcher specs Puppeteer Puppeteer.connect should support acceptInsecureCerts option",
    "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option in puppeteer.launch",
    "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option",
    "Launcher specs Browser.Events.disconnected should be emitted when: browser gets closed, disconnected or underlying websocket gets closed",
    "navigation Page.goto should send referer",
    "network Request.initiator should return the initiator",
    "network Response.fromServiceWorker Response.fromServiceWorker",
    "network Response.text should throw when requesting body of redirected response",
    "network Response.text should wait until response completes",
    "network Page.setBypassServiceWorker bypass for network",
    "network Request.resourceType should work for document type",
    "network Request.resourceType should work for stylesheets",
    "network Response.remoteAddress should work",
    "network Response.remoteAddress should support redirects",
    "OOPIF should support lazy OOP frames",
    "OOPIF should expose events within OOPIFs",
    "Page Page.Events.error should throw when page crashes",
    "Page Page.setOfflineMode should work",
    "Page Page.setOfflineMode should emulate navigator.onLine",
    "Page Page.Events.Console should return remote objects",
    "Page Page.Events.Console should trigger correct Log",
    "Page Page.Events.Console should have location when fetch fails",
    "Page Page.metrics should get metrics from a page",
    "Page Page.metrics metrics event fired on console.timeStamp",
    "Page Page.Events.PageError should fire for all value types",
    "Page Page.setUserAgent should work with platform option",
    "Page Page.setUserAgent should work with platform option without userAgent",
    "Page Page.setUserAgent should work with additional userAgentMetdata",
    "Page Page.setBypassCSP should bypass CSP meta tag",
    "Page Page.setBypassCSP should bypass CSP header",
    "Page Page.setBypassCSP should bypass after cross-process navigation",
    "Page Page.setBypassCSP should bypass CSP in iframes as well",
    "Page Page.addScriptTag should throw when added with content to the CSP page",
    "cooperative request interception Page.setRequestInterception should be abortable with custom error codes",
    "cooperative request interception Request.resourceType should work for document type",
    "cooperative request interception Request.resourceType should work for stylesheets",
    "request interception Page.setRequestInterception should work with requests without networkId",
    "request interception Page.setRequestInterception should be abortable with custom error codes",
    "request interception Request.resourceType should work for document type",
    "request interception Request.resourceType should work for stylesheets",
    "Screenshots Page.screenshot should work",
    "Screenshots Page.screenshot should clip rect",
    "Screenshots Page.screenshot should get screenshot bigger than the viewport",
    "Screenshots Page.screenshot should clip clip bigger than the viewport without \"captureBeyondViewport\"",
    "Screenshots Page.screenshot should take fullPage screenshots",
    "Screenshots Page.screenshot should take fullPage screenshots without captureBeyondViewport",
    "Screenshots Page.screenshot should return base64",
    "Screenshots ElementHandle.screenshot should capture full element when larger than viewport",
    "Screenshots Cdp should use scale for clip",
    "Screenshots Cdp should allow transparency",
    "Screenshots Cdp should render white background on jpeg file",
    "Target should report when a service worker is created and destroyed",
    "Target should create a worker from a service worker",
    "Target should close a service worker",
    "Target should create a worker from a shared worker",
    "Target should close a shared worker",
    "Target should have an opener",
    "Tracing should output a trace",
    "Tracing should run with custom categories if provided",
    "Tracing should run with default categories",
    "Tracing should throw if tracing on two pages",
    "Tracing should return a typedArray",
    "Tracing should work without options",
    "Tracing should support a typedArray without a path",
    "Tracing should properly fail if readProtocolStream errors out",
    "Workers can be closed"
  ],
  "pending": [
    "Prerender can screencast",
    "Screencasts Page.screencast should work",
    "Screencasts Page.screencast should work concurrently",
    "Screencasts Page.screencast should validate options",
    "Coverage specs JSCoverage should not hang when there is a debugger statement",
    "headful tests HEADFUL headless should be able to read cookies written by headful",
    "Screenshots Cdp should work in \"fromSurface: false\" mode",
    "waittask specs Frame.waitForSelector should work when node is added in a shadow root"
  ]
}